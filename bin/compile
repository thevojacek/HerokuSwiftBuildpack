#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Sets, how should script behave in case of a failure
set -e
set -o pipefail

# Directories
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Language versions specification
SWIFT_VERSION="4.2.1"
C_LANG_VERSION="7.0.0"

# Downloads URLs
SWIFT_URL="https://swift.org/builds/swift-$SWIFT_VERSION-release/ubuntu1604/swift-$SWIFT_VERSION-RELEASE/swift-$SWIFT_VERSION-RELEASE-ubuntu16.04.tar.gz"
C_LANG_URL="http://llvm.org/releases/$C_LANG_VERSION/clang+llvm-$C_LANG_VERSION-x86_64-linux-gnu-ubuntu-16.04.tar.xz"

# Build settings
SWIFT_BUILD_CONFIGURATION="release"
SWIFT_BUILD_PATH="$CACHE_DIR/.build"

# Set evn helper function definition
setEnv() {
    PROFILE_PATH="$BUILD_DIR/.profile.d/swift.sh"
    echo "export $1=$2" >> $PROFILE_PATH
}

# Remove unnecessary files
remove() {
  if [ -r "$1" ]; then
    rm -fr "$1"
  fi
}

# Swift version
getSwiftVersion() {
    if [ -f $BUILD_DIR/.swift-version ]; then
        SWIFT_VERSION=$(cat $BUILD_DIR/.swift-version)
        SWIFT_URL="https://swift.org/builds/swift-$SWIFT_VERSION-release/ubuntu1604/swift-$SWIFT_VERSION-RELEASE/swift-$SWIFT_VERSION-RELEASE-ubuntu16.04.tar.gz"
    fi
}

# Install Swift
installSwift() {
    echo "-----> Installing Swift $SWIFT_VERSION"

    if ! [ -d "$CACHE_DIR/libs/swift_$SWIFT_VERSION/usr/bin" ]; then
        cd $CACHE_DIR
        wget --quiet $SWIFT_URL
        mkdir -p libs/swift_$SWIFT_VERSION
        tar -C libs/swift_$SWIFT_VERSION -xvf swift-$SWIFT_VERSION-RELEASE-ubuntu16.04.tar.gz
        mv libs/swift_$SWIFT_VERSION/swift-$SWIFT_VERSION-RELEASE-ubuntu16.04/* libs/swift_$SWIFT_VERSION
        rmdir libs/swift_$SWIFT_VERSION/swift-$SWIFT_VERSION-RELEASE-ubuntu16.04
        rm -f swift-$SWIFT_VERSION-RELEASE-ubuntu16.04.tar.gz
    fi

    export PATH="$CACHE_DIR/libs/swift_$SWIFT_VERSION/usr/bin:$PATH"
    echo "-----> Swift installed"
}


# Install Clang
installClang() {
    echo "-----> Installing Clang $C_LANG_VERSION"

    if ! [ -d "$CACHE_DIR/libs/clang/bin" ]; then
        cd $CACHE_DIR
        wget --quiet $C_LANG_URL
        mkdir -p libs/clang
        tar -C libs/clang -xvf clang+llvm-$C_LANG_VERSION-x86_64-linux-gnu-ubuntu-16.04.tar.xz
        mv libs/clang/clang+llvm-$C_LANG_VERSION-x86_64-linux-gnu-ubuntu-16.04/* libs/clang
        rmdir libs/clang/clang+llvm-$C_LANG_VERSION-x86_64-linux-gnu-ubuntu-16.04
        rm -f clang+llvm-$C_LANG_VERSION-x86_64-linux-gnu-ubuntu-16.04.tar.xz
    fi

    export PATH=$CACHE_DIR/libs/clang/bin:"${PATH}"
    echo "-----> Clang installed"
}

# Build application
buildApp() {
    echo "-----> Building application"
    cd $BUILD_DIR
    swift build $SWIFT_BUILD_FLAGS --configuration "$SWIFT_BUILD_CONFIGURATION" --build-path "$SWIFT_BUILD_PATH"
}

# Installing libraries
linkSwiftLibraries() {
    cd $BUILD_DIR
    mkdir -p $BUILD_DIR/.swift-lib
    cp $CACHE_DIR/libs/swift_$SWIFT_VERSION/usr/lib/swift/linux/*.so $BUILD_DIR/.swift-lib
    find "$SWIFT_BUILD_PATH/$SWIFT_BUILD_CONFIGURATION/" -name '*.so' -type f -exec cp {} $BUILD_DIR/.swift-lib \;
    find "$SWIFT_BUILD_PATH/$SWIFT_BUILD_CONFIGURATION/" ! -name '*.so' -type f -perm /a+x -exec cp {} $BUILD_DIR \;
}

# Removal of unnecessary files
removeUnnecessaryFiles() {
    cd $BUILD_DIR
    remove "$BUILD_DIR/Package.swift"
    remove "$BUILD_DIR/Package.resolved"
    remove "$BUILD_DIR/Sources"
    remove "$BUILD_DIR/Tests"
}

# Create cache directory
mkdir -p "$CACHE_DIR"

# Start building process
getSwiftVersion
installSwift
installClang
buildApp
linkSwiftLibraries
removeUnnecessaryFiles

# Setup application environment
mkdir -p $BUILD_DIR/.profile.d

setEnv PATH '$HOME/.swift-bin:$PATH'
setEnv LD_LIBRARY_PATH '$LD_LIBRARY_PATH:$HOME/.swift-lib'

echo "-----> Application built successfully"

